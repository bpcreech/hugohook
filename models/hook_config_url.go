// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HookConfigURL hook config Url
// swagger:model HookConfigUrl
type HookConfigURL struct {

	// content type
	// Enum: [json form]
	ContentType string `json:"content_type,omitempty"`

	// insecure ssl
	InsecureSsl string `json:"insecure_ssl,omitempty"`

	// secret
	Secret string `json:"secret,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this hook config Url
func (m *HookConfigURL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hookConfigUrlTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","form"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hookConfigUrlTypeContentTypePropEnum = append(hookConfigUrlTypeContentTypePropEnum, v)
	}
}

const (

	// HookConfigURLContentTypeJSON captures enum value "json"
	HookConfigURLContentTypeJSON string = "json"

	// HookConfigURLContentTypeForm captures enum value "form"
	HookConfigURLContentTypeForm string = "form"
)

// prop value enum
func (m *HookConfigURL) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hookConfigUrlTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HookConfigURL) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("content_type", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HookConfigURL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HookConfigURL) UnmarshalBinary(b []byte) error {
	var res HookConfigURL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
